name: CI

on: [push]

jobs:
  version:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          
      - name: Get current version
        id: version
        run: |
          if [ -f version.json ]; then
            current_version=$(cat version.json | jq -r .message)
          else
            current_version="0.0.0"
          fi
          echo "current_version=$current_version" >> $GITHUB_ENV
          
      - name: Calculate new version
        run: |
          IFS='.' read -r -a version_parts <<< "${{ env.current_version }}"
          patch=$((version_parts[2] + 1))
          if [ $patch -gt 9 ]; then
            patch=0
            minor=$((version_parts[1] + 1))
            major=${version_parts[0]}
          else
            minor=${version_parts[1]}
            major=${version_parts[0]}
          fi
          new_version="$major.$minor.$patch"
          echo "new_version=$new_version" >> $GITHUB_ENV
          
      - name: Update version files
        run: |
          echo "{\"schemaVersion\": 1, \"label\": \"version\", \"message\": \"${{ env.new_version }}\", \"color\": \"blue\"}" > version.json
          
      - name: Commit and push changes
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add version.json
          git commit -m "chore: bump version to ${{ env.new_version }}" || exit 0
          # Check if tag exists before creating it
          if ! git rev-parse "v${{ env.new_version }}" >/dev/null 2>&1; then
            git tag "v${{ env.new_version }}"
          fi
          git push origin main
          git push --tags

  build-test:
    runs-on: ubuntu-latest
    needs: version

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: mbstring, xml, ctype, iconv, intl, pdo_sqlite, dom, filter, gd, json, libxml, zip
          coverage: xdebug
          
      - name: Install Composer dependencies
        run: composer install --prefer-dist --no-progress

      - name: Run tests with coverage
        run: composer test:coverage-text | tee coverage.txt
      
      - name: Extract coverage percentage
        run: |
          # Extract coverage and get the second line (Lines coverage)
          COVERAGE=$(grep -oP 'Lines:\s+\K\d+\.\d+(?=%)' coverage.txt | sed -n '1p' || echo "0")
          if [ -z "$COVERAGE" ]; then
            COVERAGE="0"
          fi
          # Round to nearest whole number
          COVERAGE_INT=$(printf "%.0f" "$COVERAGE")
          echo "COVERAGE=$COVERAGE_INT" >> "$GITHUB_ENV"

      - name: Determine Badge Color
        run: |
          COVERAGE_INT=${{ env.COVERAGE }}
          if [ "$COVERAGE_INT" -ge 80 ]; then
            echo "COLOR=green" >> $GITHUB_ENV
          elif [ "$COVERAGE_INT" -ge 70 ]; then
            echo "COLOR=yellow" >> $GITHUB_ENV
          else
            echo "COLOR=red" >> $GITHUB_ENV
          fi

      - name: Generate coverage badge
        run: |
          echo "{\"schemaVersion\": 1, \"label\": \"coverage\", \"message\": \"${{ env.COVERAGE }}%\", \"color\": \"${{ env.COLOR }}\"}" > coverage.json

      - name: Commit and push coverage badge
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add coverage.json
          git commit -m "chore: update coverage badge" || exit 0
          git push --force origin main